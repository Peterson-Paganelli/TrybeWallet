{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 0,
    "pending": 0,
    "failures": 4,
    "start": "2022-07-29T21:08:18.954Z",
    "end": "2022-07-29T21:09:07.951Z",
    "duration": 48997,
    "testsRegistered": 4,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "66a6a071-61ce-4bb2-bca5-65cdbb14fa2f",
      "title": "",
      "fullFile": "cypress/integration/04.SaveExpensesForm_spec.js",
      "file": "cypress/integration/04.SaveExpensesForm_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8a1e7750-4ada-4c26-8e8b-4c73668f229a",
          "title": "4 - Salve todas as informações do formulário no estado global",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adiciona uma despesa e verifica se a soma de despesas do header foi atualizada e os inputs voltaram ao valor inicial",
              "fullTitle": "4 - Salve todas as informações do formulário no estado global Adiciona uma despesa e verifica se a soma de despesas do header foi atualizada e os inputs voltaram ao valor inicial",
              "timedOut": null,
              "duration": 12295,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const expense = {\n  value: '11',\n  currency: 'USD',\n  method: 'Cartão de crédito',\n  tag: 'Lazer',\n  description: 'Onze dólares'\n};\n(0, _helperFunctions.addExpense)(expense);\ncy.getByTestId(_constants.TOTAL_FIELD_TEST_ID).should('have.text', '52.28');\ncy.getByTestId(_constants.VALUE_INPUT_TEST_ID).should('have.value', '');\ncy.getByTestId(_constants.DESCRIPTION_INPUT_TEST_ID).should('have.value', '');",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: expected '<p>' to have text '52.28', but the text was '0'",
                "estack": "AssertionError: Timed out retrying after 10000ms: expected '<p>' to have text '52.28', but the text was '0'\n    at Context.eval (http://localhost:3000/__cypress/tests?p=cypress/integration/04.SaveExpensesForm_spec.js:179:52)",
                "diff": "- '0'\n+ '52.28'\n"
              },
              "uuid": "05702fda-ab46-40a7-8bff-4f621411b1ad",
              "parentUUID": "8a1e7750-4ada-4c26-8e8b-4c73668f229a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adiciona uma despesa e verifica se a despesa foi salva no estado global",
              "fullTitle": "4 - Salve todas as informações do formulário no estado global Adiciona uma despesa e verifica se a despesa foi salva no estado global",
              "timedOut": null,
              "duration": 11863,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const expense = {\n  value: '11',\n  currency: 'USD',\n  method: 'Cartão de crédito',\n  tag: 'Lazer',\n  description: 'Onze dólares'\n};\n(0, _helperFunctions.addExpense)(expense);\ncy.window().its('store').invoke('getState').its('wallet.expenses').should('deep.equal', [_objectSpread(_objectSpread({}, expense), {}, {\n  id: 0,\n  exchangeRates: _data.mockData\n})]);",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: expected [] to deeply equal [ Array(1) ]",
                "estack": "AssertionError: Timed out retrying after 10000ms: expected [] to deeply equal [ Array(1) ]\n    at Context.eval (http://localhost:3000/__cypress/tests?p=cypress/integration/04.SaveExpensesForm_spec.js:192:72)",
                "diff": "- []\n+ [ { value: '11',\n+     currency: 'USD',\n+     method: 'Cartão de crédito',\n+     tag: 'Lazer',\n+     description: 'Onze dólares',\n+     id: 0,\n+     exchangeRates: \n+      { USD: [Object],\n+        USDT: [Object],\n+        CAD: [Object],\n+        EUR: [Object],\n+        GBP: [Object],\n+        ARS: [Object],\n+        BTC: [Object],\n+        LTC: [Object],\n+        JPY: [Object],\n+        CHF: [Object],\n+        AUD: [Object],\n+        CNY: [Object],\n+        ILS: [Object],\n+        ETH: [Object],\n+        XRP: [Object],\n+        DOGE: [Object] } } ]\n"
              },
              "uuid": "e7692f6b-cd05-4f1e-aa20-a2f7c8e38a09",
              "parentUUID": "8a1e7750-4ada-4c26-8e8b-4c73668f229a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se a API é chamada a cada vez que o botão 'Adicionar despesa' é clicado",
              "fullTitle": "4 - Salve todas as informações do formulário no estado global Verifica se a API é chamada a cada vez que o botão 'Adicionar despesa' é clicado",
              "timedOut": null,
              "duration": 11822,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const expense = {\n  value: '11',\n  currency: 'USD',\n  method: 'Cartão de crédito',\n  tag: 'Lazer',\n  description: 'Onze dólares'\n};\ncy.get('@mockFetch').should('be.calledOnce');\n(0, _helperFunctions.addExpense)(expense);\ncy.get('@mockFetch').should('be.calledTwice');\n(0, _helperFunctions.addExpense)(expense);\ncy.get('@mockFetch').should('be.calledThrice');",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: expected mockFetch to have been called exactly twice, but it was called once\n\n    The following calls were made:\n\n    mockFetch(\"https://economia.awesomeapi.com.br/json/all\") => {} at mockFetch (http://localhost:3000/__cypress/runner/cypress_runner.js:145264:26)",
                "estack": "AssertionError: Timed out retrying after 10000ms: expected mockFetch to have been called exactly twice, but it was called once\n\n    The following calls were made:\n\n    mockFetch(\"https://economia.awesomeapi.com.br/json/all\") => {} at mockFetch (http://localhost:3000/__cypress/runner/cypress_runner.js:145264:26)\n    at Context.eval (http://localhost:3000/__cypress/tests?p=cypress/integration/04.SaveExpensesForm_spec.js:207:26)",
                "diff": null
              },
              "uuid": "dc370a19-62f7-4046-b7c6-b0dcdeaf8b53",
              "parentUUID": "8a1e7750-4ada-4c26-8e8b-4c73668f229a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adiciona duas despesas e verifica se o estado global e header foram atualizados",
              "fullTitle": "4 - Salve todas as informações do formulário no estado global Adiciona duas despesas e verifica se o estado global e header foram atualizados",
              "timedOut": null,
              "duration": 11855,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const firstExpense = {\n  id: 0,\n  value: '11',\n  currency: 'USD',\n  method: 'Cartão de crédito',\n  tag: 'Lazer',\n  description: 'Onze dólares',\n  exchangeRates: _data.mockData\n};\n(0, _helperFunctions.addExpense)(firstExpense);\ncy.window().its('store').invoke('getState').its('wallet.expenses').should('deep.equal', [firstExpense]);\nconst secondExpense = {\n  id: 1,\n  value: '20',\n  currency: 'EUR',\n  method: 'Cartão de débito',\n  tag: 'Trabalho',\n  description: 'Vinte euros',\n  exchangeRates: _data.mockData\n};\n(0, _helperFunctions.addExpense)(secondExpense);\ncy.window().its('store').invoke('getState').its('wallet.expenses').should('deep.equal', [firstExpense, secondExpense]);\ncy.getByTestId(_constants.TOTAL_FIELD_TEST_ID).should('have.text', '154.82');",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: expected [] to deeply equal [ Array(1) ]",
                "estack": "AssertionError: Timed out retrying after 10000ms: expected [] to deeply equal [ Array(1) ]\n    at Context.eval (http://localhost:3000/__cypress/tests?p=cypress/integration/04.SaveExpensesForm_spec.js:222:72)",
                "diff": "- []\n+ [ { id: 0,\n+     value: '11',\n+     currency: 'USD',\n+     method: 'Cartão de crédito',\n+     tag: 'Lazer',\n+     description: 'Onze dólares',\n+     exchangeRates: \n+      { USD: [Object],\n+        USDT: [Object],\n+        CAD: [Object],\n+        EUR: [Object],\n+        GBP: [Object],\n+        ARS: [Object],\n+        BTC: [Object],\n+        LTC: [Object],\n+        JPY: [Object],\n+        CHF: [Object],\n+        AUD: [Object],\n+        CNY: [Object],\n+        ILS: [Object],\n+        ETH: [Object],\n+        XRP: [Object],\n+        DOGE: [Object] } } ]\n"
              },
              "uuid": "151f774d-21e6-428d-b7f2-629e6b7ac85f",
              "parentUUID": "8a1e7750-4ada-4c26-8e8b-4c73668f229a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "05702fda-ab46-40a7-8bff-4f621411b1ad",
            "e7692f6b-cd05-4f1e-aa20-a2f7c8e38a09",
            "dc370a19-62f7-4046-b7c6-b0dcdeaf8b53",
            "151f774d-21e6-428d-b7f2-629e6b7ac85f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 47835,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}